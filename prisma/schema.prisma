// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StoreType {
  ENTERPRICE
  PERSONAL
}

model User {
  id                String     @id @default(uuid()) @db.Uuid
  name              String
  givenName         String?
  familyName        String?
  nickname          String?
  email             String     @unique
  telephone         String?
  picture           String?
  verified          Boolean    @default(false)
  stores            Store[]    @relation("OwnStores")
  createdStores     Store[]    @relation("CreatedStores")
  createdItems      Item[]     @relation("CreatedItems")
  createdCategories Category[] @relation("CreatedCategories")
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  deletedAt         DateTime?
}

model Store {
  id          String    @id @default(uuid()) @db.Uuid
  owner       User      @relation("OwnStores", fields: [ownerId], references: [id])
  ownerId     String    @db.Uuid
  name        String
  description String
  type        StoreType @default(PERSONAL)
  creator     User      @relation("CreatedStores", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       Item[]
  deletedAt   DateTime?
}

model Item {
  id         String              @id @default(uuid()) @db.Uuid
  name       String
  description String             @default("no description")
  creator    User                @relation("CreatedItems", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId  String              @db.Uuid
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  store      Store               @relation(fields: [storeId], references: [id])
  price      Float
  picture    String?
  categories CategoriesOnItems[]
  storeId    String              @db.Uuid
  deletedAt  DateTime?
}

model CategoriesOnItems {
  item       Item     @relation(fields: [itemId], references: [id])
  itemId     String @db.Uuid
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.Uuid // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String   @db.Uuid

  @@id([itemId, categoryId])
}

model Category {
  id        String              @id @default(uuid()) @db.Uuid
  name      String
  creator   User                @relation("CreatedCategories", fields: [creatorId], references: [id])
  creatorId String              @db.Uuid
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  items     CategoriesOnItems[]
  storeId   String              @db.Uuid
  deletedAt DateTime?
}
